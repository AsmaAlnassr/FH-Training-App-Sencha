info it worked if it ends with ok
info using fhc@0.6.11-73
info using node@v0.6.11
verbose /usr/bin/node node symlink
verbose config file /home/evan/.fhcrc
verbose config file /usr/etc/fhcrc
verbose feedhenry url https://demo2.feedhenry.com
verbose POST box/srv/1.1/ide/demo2/file/update
verbose url https://demo2.feedhenry.com/
verbose raw, before any munging box/srv/1.1/ide/demo2/file/update
verbose url resolving [ 'https://demo2.feedhenry.com/',
verbose url resolving   '/box/srv/1.1/ide/demo2/file/update' ]
verbose url resolved https://demo2.feedhenry.com/box/srv/1.1/ide/demo2/file/update
verbose url parsed { protocol: 'https:',
verbose url parsed   slashes: true,
verbose url parsed   host: 'demo2.feedhenry.com',
verbose url parsed   hostname: 'demo2.feedhenry.com',
verbose url parsed   href: 'https://demo2.feedhenry.com/box/srv/1.1/ide/demo2/file/update',
verbose url parsed   pathname: '/box/srv/1.1/ide/demo2/file/update',
verbose url parsed   path: '/box/srv/1.1/ide/demo2/file/update' }
silly port 443
silly cookie feedhenry=J_vBnp5moXUhQ3m0Oez1WR15;
silly nocache false
silly writing json { files: 
silly writing json    [ { guid: 'qPPXQs5Ky34V47OihaK9tknh',
silly writing json        contents: '# FeedHenry Sencha Tutorial - v6\n\n## Overview\n\nFor this part of the tutorial we will create a view with access to the camera. The FeedHenry Camera API, $fh.cam(), is used to do this.\n\n* Learn to use $fh.cam()\n*\n*\n\n![](https://github.com/feedhenry/Training-Demo-App/raw/v1/docs/cameraView.png)\n\n## Step 1\n\nFirst we need to create our Camera.js controller file in controllers. This will contain a call to the $fh.cam() API call. You can read more about the camera API <a href="http://docs.feedhenry.com/api-reference/camera/">here.</a> The following code is used to create our camera controller.\n\n\tapp.controllers.camera = new Ext.Controller({\n\n\t  /*\n\t   * Open up the native camera app\n\t   * On success we set the view to be our app.views.Camera view.\n\t   * After we set the view we update the image container to hold the taken picture.\n\t   */\n\t  openCamera: function() {\n\t    $fh.cam({\n\t      act: \'picture\',\n\t      uri: true\n\t    }, function (res) {\n\t      if (res.uri) {\n\t        // Store the filepath to the image\n\t        var pathToImage = res.uri;\n\n\t        // Change the view\n\t        app.views.viewport.setActiveItem(app.views.camera);\n\t        \n\t        // Update the view\n\t        Ext.getCmp("camera_image").update({\n\t          image: pathToImage\n\t        });\n\t      }\n\t    })\n\t  }\n\n\t});\n\n## Step 2\n\nBecause we want to take a picture before displaying it within the app we must now update Home.js to handle a press on the camera icon. On a press of the camera icon we call our camera controller\'s \'openCamera\' function to instantly start the native camera app on device. The code to do this is provided below.\n\n\tnew Ext.Panel({\n  \t\theight: 100,\n\n  \t\tlayout: {\n\t      type: \'hbox\',\n\t      pack: \'center\',  \n\t    },\n\t    items: [\n\t    \t{\n\t\t  \t\txtype: \'spacer\'\n\t\t  \t},\n\t\t  \t{\n\t\t  \t\txtype: \'button\',\n\t\t  \t\tcls:  \'paymentIcon\',\n\t\t  \t\twidth:  100,\n\t\t  \t\theight: 100,\n\t\t  \t\thandler: function() {\n\t\t  \t\t\tapp.views.viewport.setActiveItem(app.views.payment, {type: \'slide\', direction: \'left\'});\n\t\t  \t\t}\n\t\t  \t},\n\t\t  \t{\n\t\t  \t\txtype: \'spacer\'\n\t\t  \t},\n\t\t  \t{\n\t\t  \t\txtype: \'button\',\n\t\t  \t\tcls: \'cameraIcon\',\n\t\t  \t\twidth:  100,\n\t\t  \t\theight: 100,\n\t\t  \t\thandler: function() {\n\t\t  \t\t  Ext.dispatch({\n\t\t\t        controller: app.controllers.camera,\n\t\t\t        action: \'openCamera\'\n\t\t\t      });\n\t\t  \t\t}\n\t\t  \t},\n\t\t  \t{\n\t\t  \t\txtype: \'spacer\'\n\t\t  \t}\n\t    ]\n  \t}),\n\n## Task - Create the \'app.views.Camera\'\n\nTry to create the view that will be populated with our captured image. It should have the same basic structure as previous views. Remember, the camera controller is expecting a component with the \'camera_image\' id. Once you have made an attempt scroll down to see a solution.\n\n\t  app.views.Camera = Ext.extend(Ext.Panel, {\n\t  title: \'Camera\',\n\t  iconCls: \'home\',\n\t  layout: \'fit\',\n\n\t  dockedItems: [\n\t    {\n\t      dock: \'top\',\n\t      xtype: \'toolbar\',\n\t      title: \'<img class="logo logoOffset" src="app/images/logo.png" />\',\n\t      items: [\n\t        {\n\t          text: \'Back\',\n\t          ui: \'back\',\n\t          handler: function() {\n\t            app.views.viewport.setActiveItem(app.views.home, {type: \'slide\', direction: \'right\'});\n\t          }\n\t        }\n\t      ]\n\t    },\n\t    {\n\t      dock: \'bottom\',\n\t      items: [\n\t        {\n\t          xtype: \'button\',\n\t          text: \'Upload Image\',\n\t          handler: function() {\n\t            Ext.Msg.alert(\'Upload\', \'Upload Image Handler.\', Ext.emptyFn);\n\t          }\n\t        }\n\t      ]\n\t    }\n\t  ],\n\t  \n\t  items: [\n\t    {\n\t      id: \'camera_image\',\n\t      tpl: \'<img src="{image}" width="100%" height="100%"/>\'\n\t    },\n\t    \n\t  ]\n\t});\n\n## Step 3\n\nNow that we have our code completed we need to update index.html to include our new files. Add the following line under <!-- Views --> making sure that it is after Viewport.js.\n\n\t<script type="text/javascript" src="app/views/Camera.js"></script>\n\nAlso add the following line under <!-- Controllers --> \n\n\t<script type="text/javascript" src="app/controllers/Camera.js"></script>\n\nRemember to add the camera view to Viewport.js which should appear as follows:\n\n\tapp.views.Viewport = Ext.extend(Ext.Panel, {\n\t  fullscreen: true,\n\t  ui: \'light\',\n\t  layout: \'card\',\n\n\t  cardSwitchAnimation: {\n\t    type: \'slide\',\n\t    cover: true\n\t  },\n\n\t  initComponent: function() {\n\t    // Put instances of cards into app.views namespace\n\t    Ext.apply(app.views, {\n\t      home:     new app.views.Home(),\n\t      map:      new app.views.MapView(),\n\t      twitter:  new app.views.Twitter(),        \n\t      payment:  new app.views.Payment(),\n\t      camera:   new app.views.Camera()\n\t    });\n\t    //put instances of cards into viewport\n\t    Ext.apply(this, {\n\t      items: [\n\t        app.views.home,\n\t        app.views.payment,\n\t        app.views.twitter,\n\t        app.views.map,        \n\t        app.views.camera\n\t      ]\n\t    });\n\t    app.views.Viewport.superclass.initComponent.apply(this, arguments);\n\t  }\n\t});\n\n\t// Loading Spinner\n\tvar mask = new Ext.LoadMask(Ext.getBody(), {\n\t  msg: "Loading Data"\n\t});' } ],
silly writing json   appId: 'qPPXQrMk8cK5a2ac3cKHInWb' }
silly headers { accept: 'application/json',
silly headers   cookie: 'feedhenry=J_vBnp5moXUhQ3m0Oez1WR15;',
silly headers   'content-type': 'application/json',
silly headers   'content-length': 5499 }
verbose response https://demo2.feedhenry.com/box/srv/1.1/ide/demo2/file/update
silly chunk {
silly chunk   "address": {
silly chunk     "_role": "true",
silly chunk     "allow-dynamic": "false",
silly chunk     "cookie-exists:feedhenry": "true",
silly chunk     "cookie:feedhenry": "J_vBnp5moXUhQ3m0Oez1WR15",
silly chunk     "endpart": "update",
silly chunk     "hostname": "https://demo2.feedhenry.com/box/srv/1.1/ide/demo2/file/update",
silly chunk     "httpmethod": "POST",
silly chunk     "login-status": "active",
silly chunk     "request-domain-equals-login-domain": "true",
silly chunk     "service": "file",
silly chunk     "subzone": "demo2",
silly chunk     "zone": "ide"
silly chunk   },
silly chunk   "date": "Fri Feb 24 17:12:37 UTC 2012 - 1330103557471",
silly chunk   "msg": ["java.lang.NullPointerException"],
silly chunk   "params": {
silly chunk     "appId": "qPPXQrMk8cK5a2ac3cKHInWb",
silly chunk     "files": "[{\"contents\":\"# FeedHenry Sencha Tutorial - v6\\n\\n## Overview\\n"
silly chunk   },
silly chunk   "request": "POST https://demo2.feedhenry.com/box/srv/1.1/ide/demo2/file/update from 91.123.227.33 ",
silly chunk   "status": "error"
silly chunk }
ERR! Error updating file: java.lang.NullPointerException
verbose exit [ 1, true ]
